{"ast":null,"code":"var _jsxFileName = \"D:\\\\WE\\\\frontend\\\\src\\\\components\\\\SubDirectoryPanel.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getSubDirectories, uploadFile } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SubDirectoryPanel({\n  folderId\n}) {\n  _s();\n  const [subDirectories, setSubDirectories] = useState([]);\n  const [file, setFile] = useState(null);\n  useEffect(() => {\n    if (folderId) {\n      getSubDirectories(folderId).then(data => setSubDirectories(data));\n    }\n  }, [folderId]);\n  const handleUploadFile = async () => {\n    if (!file) return alert('Please select a file');\n    await uploadFile(file, folderId);\n    alert('File uploaded successfully');\n    setFile(null);\n  };\n  if (!folderId) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please select a folder to view its subdirectories.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Subdirectories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: subDirectories.map(subDir => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: subDir.name\n      }, subDir.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => setFile(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUploadFile,\n        children: \"Upload File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(SubDirectoryPanel, \"31C+iY6QoYd/MpxEh5ziTbi5BbM=\");\n_c = SubDirectoryPanel;\nexport default SubDirectoryPanel;\nvar _c;\n$RefreshReg$(_c, \"SubDirectoryPanel\");","map":{"version":3,"names":["React","useEffect","useState","getSubDirectories","uploadFile","jsxDEV","_jsxDEV","SubDirectoryPanel","folderId","_s","subDirectories","setSubDirectories","file","setFile","then","data","handleUploadFile","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","map","subDir","name","id","type","onChange","e","target","files","onClick","_c","$RefreshReg$"],"sources":["D:/WE/frontend/src/components/SubDirectoryPanel.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getSubDirectories, uploadFile } from '../services/api';\r\n\r\nfunction SubDirectoryPanel({ folderId }) {\r\n  const [subDirectories, setSubDirectories] = useState([]);\r\n  const [file, setFile] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (folderId) {\r\n      getSubDirectories(folderId).then((data) => setSubDirectories(data));\r\n    }\r\n  }, [folderId]);\r\n\r\n  const handleUploadFile = async () => {\r\n    if (!file) return alert('Please select a file');\r\n    await uploadFile(file, folderId);\r\n    alert('File uploaded successfully');\r\n    setFile(null);\r\n  };\r\n\r\n  if (!folderId) {\r\n    return <p>Please select a folder to view its subdirectories.</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>Subdirectories</h3>\r\n      <ul>\r\n        {subDirectories.map((subDir) => (\r\n          <li key={subDir.id}>{subDir.name}</li>\r\n        ))}\r\n      </ul>\r\n      <div>\r\n        <input type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\r\n        <button onClick={handleUploadFile}>Upload File</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SubDirectoryPanel;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,iBAAiB,EAAEC,UAAU,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,SAASC,iBAAiBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACvC,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,EAAE;MACZL,iBAAiB,CAACK,QAAQ,CAAC,CAACM,IAAI,CAAEC,IAAI,IAAKJ,iBAAiB,CAACI,IAAI,CAAC,CAAC;IACrE;EACF,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EAEd,MAAMQ,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI,CAACJ,IAAI,EAAE,OAAOK,KAAK,CAAC,sBAAsB,CAAC;IAC/C,MAAMb,UAAU,CAACQ,IAAI,EAAEJ,QAAQ,CAAC;IAChCS,KAAK,CAAC,4BAA4B,CAAC;IACnCJ,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,IAAI,CAACL,QAAQ,EAAE;IACb,oBAAOF,OAAA;MAAAY,QAAA,EAAG;IAAkD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAClE;EAEA,oBACEhB,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBhB,OAAA;MAAAY,QAAA,EACGR,cAAc,CAACa,GAAG,CAAEC,MAAM,iBACzBlB,OAAA;QAAAY,QAAA,EAAqBM,MAAM,CAACC;MAAI,GAAvBD,MAAM,CAACE,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmB,CACtC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACLhB,OAAA;MAAAY,QAAA,gBACEZ,OAAA;QAAOqB,IAAI,EAAC,MAAM;QAACC,QAAQ,EAAGC,CAAC,IAAKhB,OAAO,CAACgB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAAE;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClEhB,OAAA;QAAQ0B,OAAO,EAAEhB,gBAAiB;QAAAE,QAAA,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACb,EAAA,CAnCQF,iBAAiB;AAAA0B,EAAA,GAAjB1B,iBAAiB;AAqC1B,eAAeA,iBAAiB;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}