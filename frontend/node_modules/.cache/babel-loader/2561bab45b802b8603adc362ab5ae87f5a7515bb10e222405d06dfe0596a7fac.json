{"ast":null,"code":"var _jsxFileName = \"D:\\\\WE\\\\frontend\\\\src\\\\components\\\\SubDirectoryPanel.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { getSubDirectories, uploadFile } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SubDirectoryPanel({\n  folderId\n}) {\n  _s();\n  const [subDirectories, setSubDirectories] = useState([]);\n  const [file, setFile] = useState(null);\n  console.log(\"folderId\", folderId);\n  useEffect(() => {\n    if (folderId) {\n      getSubDirectories(folderId).then(data => {\n        console.log(data);\n        setSubDirectories(data);\n      });\n    }\n  }, [folderId]);\n  const handleUploadFile = async () => {\n    if (!file) return alert(\"Please select a file\");\n    await uploadFile(file, folderId);\n    alert(\"File uploaded successfully\");\n    setFile(null);\n  };\n  const [newFolderName, setNewFolderName] = useState(\"\");\n  const createFolder = async (name, parent_id) => {\n    const response = await fetch(`${process.env.REACT_APP_BASE_URL}/create-folder`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name,\n        parent_id\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to create folder\");\n    }\n    return response.json();\n  };\n  const handleCreateFolder = async () => {\n    if (!newFolderName.trim()) return alert(\"Folder name is required\");\n    const folder = await createFolder(newFolderName, folderId);\n    setSubDirectories([...subDirectories, folder]);\n    setNewFolderName(\"\");\n  };\n  if (!folderId) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please select a folder to view its subdirectories.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Subdirectories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: subDirectories.map(subDir => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: subDir.name\n      }, subDir.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newFolderName,\n        onChange: e => setNewFolderName(e.target.value),\n        placeholder: \"New folder name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateFolder,\n        children: \"Create Folder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => setFile(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUploadFile,\n        children: \"Upload File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(SubDirectoryPanel, \"Msg4O1DGkx+YRAdmu0xe+gHUfVI=\");\n_c = SubDirectoryPanel;\nexport default SubDirectoryPanel;\nvar _c;\n$RefreshReg$(_c, \"SubDirectoryPanel\");","map":{"version":3,"names":["React","useEffect","useState","getSubDirectories","uploadFile","jsxDEV","_jsxDEV","SubDirectoryPanel","folderId","_s","subDirectories","setSubDirectories","file","setFile","console","log","then","data","handleUploadFile","alert","newFolderName","setNewFolderName","createFolder","name","parent_id","response","fetch","process","env","REACT_APP_BASE_URL","method","headers","body","JSON","stringify","ok","Error","json","handleCreateFolder","trim","folder","children","fileName","_jsxFileName","lineNumber","columnNumber","map","subDir","id","type","value","onChange","e","target","placeholder","onClick","files","_c","$RefreshReg$"],"sources":["D:/WE/frontend/src/components/SubDirectoryPanel.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { getSubDirectories, uploadFile } from \"../services/api\";\r\n\r\nfunction SubDirectoryPanel({ folderId }) {\r\n  const [subDirectories, setSubDirectories] = useState([]);\r\n  const [file, setFile] = useState(null);\r\n  console.log(\"folderId\", folderId);\r\n\r\n  useEffect(() => {\r\n    if (folderId) {\r\n      getSubDirectories(folderId).then((data) => {\r\n        console.log(data);\r\n        setSubDirectories(data);\r\n      });\r\n    }\r\n  }, [folderId]);\r\n\r\n  const handleUploadFile = async () => {\r\n    if (!file) return alert(\"Please select a file\");\r\n    await uploadFile(file, folderId);\r\n    alert(\"File uploaded successfully\");\r\n    setFile(null);\r\n  };\r\n\r\n  const [newFolderName, setNewFolderName] = useState(\"\");\r\n\r\n  const createFolder = async (name, parent_id) => {\r\n    const response = await fetch(`${process.env.REACT_APP_BASE_URL}/create-folder`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ name, parent_id }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to create folder\");\r\n    }\r\n    return response.json();\r\n      }\r\n  const handleCreateFolder = async () => {\r\n    if (!newFolderName.trim()) return alert(\"Folder name is required\");\r\n    const folder = await createFolder(newFolderName, folderId);\r\n    setSubDirectories([...subDirectories, folder]);\r\n    setNewFolderName(\"\");\r\n  };\r\n\r\n  if (!folderId) {\r\n    return <p>Please select a folder to view its subdirectories.</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>Subdirectories</h3>\r\n      <ul>\r\n        {subDirectories.map((subDir) => (\r\n          <li key={subDir.id}>{subDir.name}</li>\r\n        ))}\r\n      </ul>\r\n      <div><input\r\n          type=\"text\"\r\n          value={newFolderName}\r\n          onChange={(e) => setNewFolderName(e.target.value)}\r\n          placeholder=\"New folder name\"\r\n        />\r\n        <button onClick={handleCreateFolder}>Create Folder</button>\r\n        <input type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\r\n        <button onClick={handleUploadFile}>Upload File</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SubDirectoryPanel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}